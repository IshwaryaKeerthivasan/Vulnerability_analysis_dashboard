import pandas as pd

data = pd.read_csv("/content/known_exploited_vulnerabilities.csv")

data.head()

# Convert 'dateAdded' and 'dueDate' columns to datetime objects
data['dateAdded'] = pd.to_datetime(data['dateAdded'], format='%Y-%m-%d')
data['dueDate'] = pd.to_datetime(data['dueDate'], format='%Y-%m-%d')

# Handle missing data (replace 'Unknown' with NaN in 'knownRansomwareCampaignUse' column)
data['knownRansomwareCampaignUse'].replace('Unknown', pd.NA, inplace=True)

data.head()

data.to_csv('cleaned_data.csv', index=False)

data.isnull().any()

data.isnull().sum()

data.isnull().sum().sum()

data = data.dropna()

data.isnull().sum()

data.to_csv('cleaned_data.csv', index=False)

df = pd.read_csv("/content/cleaned_data.csv")

df.isnull().sum()

df.head()

!pip install dash

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from dash import dcc

# Inside your Dash app
product_counts = df['product'].value_counts()
fig_product = px.bar(
    x=product_counts.index,
    y=product_counts.values,
    labels={'x': 'Product', 'y': 'Number of Vulnerabilities'}
)
fig_product.update_layout(title_text='Vulnerabilities by Product')

# In your app.layout
dcc.Graph(figure=fig_product, id='product-graph')

# Inside your Dash app
fig_time = px.line(
    df,
    x='dateAdded',
    y=df.index
)
fig_time.update_layout(
    title_text='Vulnerabilities by Known Ransomware Campaign Use Over Time',
    xaxis_title='Date Added',
    yaxis_title='Number of Vulnerabilities'
)

# In your app.layout
dcc.Graph(figure=fig_time, id='time-graph')

# Inside your Dash app

import plotly.graph_objects as go

action_data = df['requiredAction'].value_counts().reset_index()
action_data.columns = ['Action', 'Count']


fig_sunburst = go.Figure(go.Sunburst(
    labels=action_data['Action'],
    parents=[''] * len(action_data),  # No parent hierarchy
    values=action_data['Count'],
))
fig_sunburst.update_layout(title_text='Distribution of Required Actions (Sunburst Chart)')

# In your app.layout
dcc.Graph(figure=fig_sunburst, id='sunburst-graph')

# Inside your Dash app

ransomware_counts = df['knownRansomwareCampaignUse'].value_counts()

fig_ransomware = px.bar(
    x=ransomware_counts.index,
    y=ransomware_counts.values,
    labels={'x': 'Known Ransomware Campaign Use', 'y': 'Number of Vulnerabilities'}
)
fig_ransomware.update_layout(title_text='Vulnerabilities by Ransomware Campaign Use')

# In your app.layout
dcc.Graph(figure=fig_ransomware, id='ransomware-graph')

pip install matplotlib wordcloud

from wordcloud import WordCloud
import io
import base64

# Create the Word Cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(df['shortDescription']))

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.title('Word Cloud of Vulnerability Descriptions')

# Save the Matplotlib figure as an image file
buffer = io.BytesIO()
plt.savefig(buffer, format='png')
buffer.seek(0)
image_data = base64.b64encode(buffer.read()).decode()

# Clear the Matplotlib figure to release resources
plt.clf()
plt.close()

# Inside your Dash app
fig_histogram = px.histogram(
    df,
    x='dateAdded',
    title='Histogram of Vulnerability Counts Over Time'
)
fig_histogram.update_xaxes(title_text='Date Added')
fig_histogram.update_yaxes(title_text='Number of Vulnerabilities')

# In your app.layout
dcc.Graph(figure=fig_histogram, id='histogram-graph')

import pandas as pd
from sklearn.ensemble import IsolationForest

# Load your cybersecurity data into a DataFrame (df)

# Assuming the 'knownRansomwareCampaignUse' column indicates whether it's known ransomware or not
# You may need to preprocess and feature engineer your data based on your specific use case

# Define features (X)
X = df[['vendorProject', 'product', 'vulnerabilityName']]

# Convert categorical features into numerical using one-hot encoding
X = pd.get_dummies(X, columns=['vendorProject', 'product', 'vulnerabilityName'])

# Create an Isolation Forest model for anomaly detection
iso_forest = IsolationForest(contamination=0.1, random_state=42)  # You can adjust the contamination parameter

# Fit the model to the data and predict anomalies
anomaly_scores = iso_forest.fit_predict(X)

# Anomalies are identified with a score of -1
anomalies = df[anomaly_scores == -1]

# Print or analyze the anomalies
print("Anomalies:")
print(anomalies)

import pandas as pd
from sklearn.ensemble import IsolationForest

# Load your cybersecurity data into a DataFrame (df)

# Assuming the 'knownRansomwareCampaignUse' column indicates whether it's known ransomware or not
# You may need to preprocess and feature engineer your data based on your specific use case

# Define features (X) and target (y)
X = df[['vendorProject', 'product', 'vulnerabilityName']]
y = df['knownRansomwareCampaignUse']

# Convert categorical features into numerical using one-hot encoding
X = pd.get_dummies(X, columns=['vendorProject', 'product', 'vulnerabilityName'])

# Create an Isolation Forest model for anomaly detection
iso_forest = IsolationForest(contamination=0.1, random_state=42)  # Adjust the contamination based on your expected anomaly rate
iso_forest.fit(X)

# Predict anomalies (outliers)
anomalies = iso_forest.predict(X)

# Add the anomaly predictions to the original DataFrame
df['Anomaly'] = anomalies

# Filter and create a DataFrame of anomalies
anomaly_df = df[df['Anomaly'] == -1]

# Print or analyze the anomalies
print("Anomalies:")
print(anomaly_df)

from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score

# Assuming that 'true_labels' are the ground truth labels for anomalies (1 for anomaly, -1 for normal)
true_labels = df['knownRansomwareCampaignUse'].apply(lambda x: 1 if x == 'Known' else -1)

# Calculate evaluation metrics
precision = precision_score(true_labels, anomalies)
recall = recall_score(true_labels, anomalies)
f1 = f1_score(true_labels, anomalies)
accuracy = accuracy_score(true_labels, anomalies)

# Print the evaluation metrics
print("Precision:", precision)
print("Recall:", recall)
print("F1-Score:", f1)
print("Accuracy:", accuracy)

pip install dash

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import dash
from dash import dcc, html
import base64
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import io

# Load your cleaned data
df = pd.read_csv("cleaned_data.csv")

# Create the Word Cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(df['shortDescription']))

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.title('Word Cloud of Vulnerability Descriptions')

# Save the Word Cloud as a base64-encoded image
buffer = io.BytesIO()
plt.savefig(buffer, format='png')
buffer.seek(0)
image_data = base64.b64encode(buffer.read()).decode()
plt.clf()
plt.close()

# Initialize the Dash app
app = dash.Dash(__name__)

# Define the layout of your dashboard
app.layout = html.Div([
    html.H1("Cybersecurity Dashboard"),

    dcc.Graph(
        id='product-graph',
        figure=px.bar(
            x=df['product'].value_counts().index,
            y=df['product'].value_counts().values,
            labels={'x': 'Product', 'y': 'Number of Vulnerabilities'},
            title='Vulnerabilities by Product'
        )
    ),

    dcc.Graph(
        id='time-graph',
        figure=px.line(
            df,
            x='dateAdded',
            y=df.index,
            title='Vulnerabilities by Known Ransomware Campaign Use Over Time',
            labels={'x': 'Date Added', 'y': 'Number of Vulnerabilities'}
        )
    ),

    dcc.Graph(
        id='sunburst-graph',
        figure=go.Figure(go.Sunburst(
            labels=df['requiredAction'].value_counts().index,
            parents=[''] * len(df['requiredAction'].value_counts()),
            values=df['requiredAction'].value_counts().values
        ),
        layout=go.Layout(title='Distribution of Required Actions (Sunburst Chart)'))
    ),

    dcc.Graph(
        id='ransomware-graph',
        figure=px.bar(
            x=df['knownRansomwareCampaignUse'].value_counts().index,
            y=df['knownRansomwareCampaignUse'].value_counts().values,
            labels={'x': 'Known Ransomware Campaign Use', 'y': 'Number of Vulnerabilities'},
            title='Vulnerabilities by Ransomware Campaign Use'
        )
    ),

    # Store the Word Cloud image data
    dcc.Store(id='wordcloud-image', data=image_data),

    # Display the Word Cloud
    html.Img(id='wordcloud', alt="Word Cloud of Vulnerability Descriptions", src=f'data:image/png;base64,{image_data}'),

    dcc.Graph(
        id='histogram-graph',
        figure=px.histogram(
            df,
            x='dateAdded',
            title='Histogram of Vulnerability Counts Over Time',
            labels={'x': 'Date Added', 'y': 'Number of Vulnerabilities'}
        )
    )
])

if __name__ == '__main__':
    app.run_server(debug=True)
